#include <ros/ros.h>
#include <std_msgs/String.h>
#include <sstream>
#include <iostream>
#include <string>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include "ServerSocket.h"
#include "SocketException.h"

using std::string;
using std::cin;
using std::cout;
using std::endl;
int main(int argc, char** argv)
{
  ros::init(argc, argv, "command_generator_node");
  ros::NodeHandle n;
  ros::Publisher chatter_pub = n.advertise<std_msgs::String>("korus_control_topic", 1);
  string str1;
  
  // Create Socket
  ServerSocket server(5000);

  while (ros::ok())
  {
    std_msgs::String msg;

	ServerSocket new_sock;
	server.accept(new_sock);

	new_sock >> msg.data;
	str1 = msg.data;

    chatter_pub.publish(msg);
    ros::spinOnce();
	  
	if(str1.compare("q")==0)
	{
	return EXIT_SUCCESS;
	}

  }

}

